{"version":3,"sources":["space.tsx","utils.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Space","position","spaceValue","onPlayerMove","className","onClick","winningConditionsMet","board","player","index","cords","Math","floor","newBoard","i","computerMoves","validMove","randomNum","random","App","defaultBoard","useState","setBoard","playerTurn","setPlayerTurn","gameStatus","setGameStatus","moveCount","setMoveCount","onComputerMove","a","console","log","setTimeout","move","boardComponents","map","space","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a6b5a40.chunk.js","sourcesContent":["import React, { FC } from 'react'\r\n\r\ninterface Props {\r\n    position: number,\r\n    onPlayerMove: Function,\r\n    spaceValue: string\r\n \r\n}\r\n\r\nconst Space: FC<Props> = ({position, spaceValue, onPlayerMove}) => {\r\n\r\n\r\n    return (\r\n        <div className=\"space\" onClick={() => onPlayerMove(position)}>\r\n            {spaceValue}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Space","const winningConditionsMet = (board: string[],  player: string, index: number) => {\r\n\r\n    const cords = [Math.floor(index/3), index - Math.floor(index/3)*3]\r\n    const newBoard = [[board[0], board[1], board[2]], [board[3], board[4], board[5]], [board[6], board[7], board[8]]]\r\n\r\n    //check row\r\n    for (let i = 0; i < 3; i++) {\r\n        if (newBoard[cords[0]][i] !== player) {\r\n            break\r\n        }\r\n        if ( i === 2) {\r\n            return true\r\n        }\r\n    }\r\n    //check column\r\n    for (let i = 0; i < 3; i++) {\r\n        if (newBoard[i][cords[1]] !== player) {\r\n            break\r\n        }\r\n        if ( i === 2) {\r\n            return true\r\n        }\r\n    }\r\n\r\n    //check diagnols\r\n\r\n    if (cords[0] === cords[1]){\r\n        if (newBoard[0][0] === player && newBoard[1][1] === player && newBoard[2][2] === player) {\r\n            return true\r\n        }\r\n        if (newBoard[0][2] === player && newBoard[1][1] === player && newBoard[2][0] === player) {\r\n            return true\r\n        }\r\n    }\r\n\r\n    return false\r\n\r\n}\r\n\r\n\r\nconst computerMoves = (board: string[]) => {\r\n\r\n    let validMove = false\r\n    let randomNum = 0\r\n    while(!validMove) {\r\n        randomNum = Math.floor(Math.random() * 9)\r\n        if ( board[randomNum] === \"\") {\r\n            validMove = true\r\n        }\r\n    }\r\n    return randomNum\r\n}\r\n\r\nexport  { winningConditionsMet, computerMoves }","import React, { useState } from 'react';\r\n\r\nimport Space from './space'\r\nimport { winningConditionsMet, computerMoves } from './utils'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const defaultBoard = ([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"])\r\n  const [board, setBoard] = useState(defaultBoard)\r\n  const [playerTurn, setPlayerTurn] = useState(\"X\")\r\n  const [gameStatus, setGameStatus] = useState('none')\r\n  const [moveCount, setMoveCount] = useState(0)\r\n\r\n  const onComputerMove = async () => {\r\n    console.log('move')\r\n    setTimeout(() => {\r\n      let move = computerMoves(board)\r\n      let newBoard = board\r\n      newBoard[move] = \"O\"\r\n      setBoard(newBoard)\r\n      if (winningConditionsMet(newBoard, \"O\", move)) {\r\n        setGameStatus('done')\r\n        return\r\n      }\r\n      setMoveCount(moveCount + 2)\r\n      setPlayerTurn(\"X\")\r\n    }, 500)\r\n\r\n  }\r\n\r\n  const  onPlayerMove = async (position: number) => {\r\n    if (board[position] !== \"\" || (gameStatus !== \"player\" && gameStatus !== \"computer\")) {\r\n      return\r\n    }\r\n\r\n    let newBoard = board\r\n    newBoard[position] = playerTurn\r\n    setBoard(newBoard)\r\n    if (winningConditionsMet(newBoard, playerTurn, position)) {\r\n      setGameStatus('done')\r\n      return\r\n    }\r\n\r\n    await setMoveCount(moveCount + 1)\r\n    if ( playerTurn === \"X\") {\r\n     await setPlayerTurn(\"O\")\r\n    } else {\r\n      await setPlayerTurn(\"X\")\r\n    }\r\n\r\n    if (gameStatus === 'computer' && moveCount < 8) {\r\n      onComputerMove()\r\n    }\r\n    if (moveCount >= 8) {\r\n      setGameStatus('none')\r\n    }\r\n  }\r\n\r\n  const boardComponents = board.map((space, i) => <Space key={i} spaceValue={space} position={i} onPlayerMove={onPlayerMove}/>)\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>TIC TAC REACT</h1>\r\n      <h4>Play against the computer, or a friend!</h4>\r\n\r\n      <button onClick={ () => {\r\n        setGameStatus('computer')\r\n        setMoveCount(0)\r\n        setBoard(defaultBoard)\r\n        setPlayerTurn(\"X\")\r\n      }}>Play Against The Computer</button>\r\n\r\n      <button onClick={ () => {\r\n        setGameStatus('player')\r\n        setMoveCount(0)\r\n        setBoard(defaultBoard)\r\n        setPlayerTurn(\"X\")\r\n      }}>Play Against Another Player</button>\r\n\r\n      <h3>{moveCount === 9? \"Cat's Game!\" : null}</h3>\r\n\r\n      <h3>{gameStatus === 'done'? `${playerTurn} Wins!` : null}</h3>\r\n      \r\n      <h3>{gameStatus === 'player'? `It's ${playerTurn}'s Turn`: null}</h3>\r\n      <h3>{gameStatus === 'computer'? `It's ${playerTurn}'s Turn`: null}</h3>\r\n      <div className=\"board\">\r\n        {boardComponents}\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}